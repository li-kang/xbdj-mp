<template minapp='native' xlang='wxml'>
  <view class="container">
    <wxs src="../../../wxs/time.wxs" module="Time" />
    <import src="template_goods_edit.wxml"></import>

    <form bindsubmit="onSubmit">
      <include src="../common/include_link_header_create.wxml" />
      <van-cell-group title="团购商品列表" border="{{false}}">
        <em-badge
          wx:for="{{link.goods}}"
          wx:key="{{index}}"
          data-index="{{index}}"
          icon="clear"
          hidden="{{link.goods.length===1}}"
          catch:click="onDelGoods"
        >
          <template is="goods-edit" data="{{ goods:link.goods, validate, index }}" />
        </em-badge>
      </van-cell-group>
      <view class="more" catchtap="onAddGoods">+添加更多商品</view>
      <van-cell-group title="接龙设置">
        <van-switch-cell
          name="enable_express"
          title="是否支持配送到家"
          data-key="enable_express"
          checked="{{link.enable_express}}"
          bind:change="onChange"
          border
        />
        <van-field
          wx:for="{{link.delivery}}"
          wx:key="{{index}}"
          label="提货点"
          placeholder="请输入自提点"
          icon="location"
          data-key="delivery[{{index}}].name"
          data-index="{{index}}"
          value="{{ link.delivery[index].name }}"
          clearable
          bind:clear="onDelLocation"
          bind:change="onChange"
          bind:click-icon="onSetLocation"
          bind:focus="{{link.delivery[index].name?'':'onSetLocation'}}"
        />
      </van-cell-group>
      <view class="more" catchtap="onAddLocation">+添加提货点</view>
      <button
        type="primary"
        open-type="getUserInfo"
        style="margin-top:20rpx;"
        form-type="submit"
      >发布接龙</button>
    </form>
  </view>
</template>

<script>
import mpx, { createPage } from "@mpxjs/core";
// import Notify from 'vant-weapp/notify/notify'
import Validator from "../../../utils/validator.js";
import Ext from "../../../utils/ext.js";
import Time from "../../../utils/time.js";
// 引用api
const api = {
  link: require("../../../api/link.js").default
};

const validator = new Validator();
// 备注  ^goods\[\d+\]\.price$
// 更改  在字符串中  \   不被解析   需要输入 \\
const validateList = {
  title: [{ rule: "required" }],
  "goods\\[\\d+\\]\\.name": [
    { rule: "required", message: "此处为必填项，请输入商品名称" }
  ],
  "goods\\[\\d+\\]\\.price": [
    { rule: "required", message: "此处为必填项，请输入商品价钱" }
  ],
  "goods\\[\\d+\\]\\.specification": [
    { rule: "required", message: "此处为必填项，请输入商品规格" }
  ],
  "delivery\\[\\d+\\]\\.address": [
    { rule: "required", message: "此处为必填项，请输入地址" }
  ]
};

createPage({
  data: {
    link: {
      id: 0,
      title: "Title",
      content: "",
      images: [],
      goods: [{ name: "西红柿", price: 300, specification: "500g" }],
      enable_express: false,
      delivery: [{}]
    },
    validate: {},
    images: [], // 本地选择的临时图片
  },

  onChange(ev) {
    let { key } = ev.target.dataset;
    Ext.setData(this.data.link, key, ev.detail);
  },

  onPriceChange(ev) {
    let { key } = ev.target.dataset;
    Ext.setData(this.data.link, key, parseInt(ev.detail * 100));
  },

  onChangeImages(ev) {
    this.data.images = ev.detail;
  },

  onBlur(ev) {
    let { key } = ev.target.dataset;
    let val = ev.detail.value;
    let result = validator.validateFormItem(key, val, validateList);
    this.validate[result.key] = result.message;
    this.$forceUpdate(this.validate);
  },

  onSubmit(ev) {
    // 表单验证
    let dataList = ev.detail.value;
    if (!this._validate(dataList)) return;

    // let dataTest = {
    //     "id": 12,
    //     "title": "每日水果团（演示）3",
    //     "content": "4加拿大车厘子和香蕉，喜欢吃的，一起来团吧。仅限新龙城用户购买。演示案例，不发货，不退款，请勿大额支付。不发货，不退款，请勿大额支付。不发货，不退款，请勿大额支付。",
    //     "images_count": 3,
    //     "goods": [
    //         {"name": "加拿大车厘子12", "price": 1050, "specification": "3斤/份", "stock": 50 },
    //         {"name": "香蕉", "price": 530, "specification": "5斤/份", "stock": 50 }
    //     ],
    //     "delivery": [{"name": "海淀区人民政府", "address": "北京市海淀区长春桥路17号", "latitude": 39.95933, "longitude": 116.29845}],
    //     "enable_express": false,
    //     "status": 1
    // }

    wx.showLoading({
      title: "正在创建接龙",
      mask: true
    });

    // 上传图片
    let uploads = this._uploadImages();

    // 上传图片完成
    Promise.all(uploads)
      .then(res => {
        // 创建接龙
        this.data.link.status = 1;
        console.log('create', this.data.link);
        return api.link.create(this.data.link);
      })
      .then(res => {
        console.log(res);
        // this.data.link.id = res;
        wx.hideLoading();
        // TODO: 导航到指定页面
      })
      .catch(reason => {
        console.warn(reason);
        wx.hideLoading();
      });
  },

  // 表单验证
  _validate(dataList) {
    let result = validator.validateForm(dataList, validateList);
    this.validate = result;

    for (let key in result) {
      if (result[key]) {
        return false;
      }
    }
    return true;
  },

  // 上传图片
  _uploadImages() {
    return this.data.images.map((item, index, images) => {
      // 生成文件名
      let extension = item.split(".").pop();
      let time = Time.format("yyyyMMddhhmmssS");
      let name = time + (index + "").padStart(2, "0") + "." + extension;

      // 上传图片
      return wx.cloud
        .uploadFile({
          cloudPath: `links/1/images/${name}`, // 设置目录路径 TODO: 设置用户ID
          filePath: item
        })
        .then(res => {
          // 更新要提交的图片地址
          this.data.link.images[index] = res.fileID;
          return res.fileID;
        });
    });
  },

  onAddGoods() {
    this.link.goods.push({});
  },

  //删除商品
  onDelGoods(ev) {
    // 删除验证信息
    let { index } = ev.target.dataset;
    this.validate[`goods[${index}].name`] = null;
    this.validate[`goods[${index}].specification`] = null;
    this.validate[`goods[${index}].price`] = null;

    // 至少保留一项
    if (this.link.goods.length <= 1) {
      this.link.goods[0] = {};
      return;
    }

    this.link.goods.splice(index, 1);
  },
  //获取位置
  onSetLocation(ev) {
    let { index } = ev.target.dataset;

    mpx.chooseLocation().then(res => {
      this.link.delivery[index] = res;
    });
  },

  //删除位置事件
  onDelLocation(ev) {
    if (this.link.delivery.length <= 1) {
      this.link.delivery[0] = {};
      return;
    }

    let { index } = ev.target.dataset;
    this.link.delivery.splice(index, 1);
  },

  //添加位置
  onAddLocation() {
    this.link.delivery.push({});
  }
});
</script>

<style>
@import url("../common/include_link_header.wxss");

.goods-item {
  margin-top: 10rpx;
}
</style>

<script  type='application/json' lang='json'>
{
  "navigationBarTitleText": "创建团购活动",
  "usingComponents": {
    "em-images": "../../../components/images",
    "van-cell": "vant-weapp/lib/cell",
    "van-cell-group": "vant-weapp/lib/cell-group",
    "van-field": "vant-weapp/lib/field",
    "van-switch-cell": "vant-weapp/lib/switch-cell",
    "van-notify": "vant-weapp/lib/notify",
    "em-badge":"../../../components/badge.mpx"
  }
}
</script>

